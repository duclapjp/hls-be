<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
    "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.cnctor.hls.domain.repository.plan.PlanRepository">
	<resultMap id="planResultMap" type="Plan">
		<id property="planId" column="plan_id" />
		
		<result property="name" column="name" />
		<result property="cOrder" column="c_order" />
		<result property="status" column="status" />
		<result property="createdDate" column="created_date" />
		<result property="updatedDate" column="updated_date" />
    <result property="createdAccountId" column="created_account_id" />
    <result property="storeId" column="store_id" />
    <result property="createdAccount" column="created_name" />
    <result property="defaultPlan" column="default_plan" />
    <result property="availableFor" column="available_for" />
    <result property="canSelectPlan" column="can_select_plan" />
    
    <collection property="items" select="fetchItemsQuery" column="plan_id" 
        ofType="PlanItem" fetchType="eager">
    </collection>
    
	</resultMap>
	
	<select id="fetchItemsQuery" resultType="PlanItem">
    SELECT
      
      pi.plan_id,
      pi.item_id,
      i.item_code,
      pi.item_json_value,
      pi.tab
      
    FROM
      public.plan_item pi INNER JOIN public.item i ON pi.item_id = i.item_id
      
    WHERE
      pi.plan_id=#{plan_id}

    ORDER BY
      pi.item_order asc
    
  </select>
	
	<insert id="insert" parameterType="Plan">
    <selectKey keyProperty="planId" resultType="long" order="BEFORE">
      SELECT nextval('public."SEQ_PLAN"') AS planId
    </selectKey>

    INSERT INTO 
      public.plan
      (
        plan_id, 
        name, 
        c_order, 
        status, 
        created_date, 
        updated_date, 
        store_id,
        created_account_id,
        default_plan
      )
    VALUES 
      (
        #{planId}, 
        #{name}, 
        #{cOrder}, 
        #{status}, 
        #{createdDate}, 
        #{updatedDate}, 
        #{storeId},
        #{createdAccountId},
        #{defaultPlan}
      )
  </insert>
  
  <insert id="upsert" parameterType="Plan">
    INSERT INTO 
    public.plan
      (
        plan_id, 
        name, 
        c_order, 
        status, 
        created_date, 
        updated_date, 
        store_id,
        created_account_id,
        default_plan,
        available_for,
        can_select_plan
      )
    VALUES 
      (
        #{planId}, 
        #{name}, 
        #{cOrder}, 
        #{status}, 
        #{createdDate}, 
        #{updatedDate}, 
        #{storeId},
        #{createdAccountId},
        #{defaultPlan},
        #{availableFor},
        #{canSelectPlan}
      )
    
    ON CONFLICT (plan_id)
    DO UPDATE SET
    
      name=#{name}, 
      status=#{status},
      default_plan = #{defaultPlan},
      available_for = #{availableFor},
      can_select_plan = #{canSelectPlan}
  </insert>
	
	<select id="findOne" parameterType="Long"
    resultMap="planResultMap">
    
    SELECT 
      p.plan_id, 
      p.name, 
      p.c_order, 
      p.status, 
      p.created_date, 
      p.updated_date, 
      p.store_id,
      p.created_account_id,
      a.display_name as created_name,
      p.default_plan,
      p.can_select_plan
    FROM 
      public.plan p
      
    LEFT JOIN 
      public.account a 
    ON a.account_id = p.created_account_id
     
    WHERE p.plan_id = #{planId}
  </select>
  
  <select id="filter" parameterType="PlanSearchCriteria"
    resultMap="planResultMap">
    
    SELECT
      p.plan_id, 
      p.name, 
      p.c_order, 
      p.status, 
      p.created_date, 
      p.updated_date, 
      p.store_id,
      p.created_account_id,
      a.display_name as created_name,
      p.can_select_plan
      
    FROM 
      public.plan as p
    
    LEFT JOIN 
      public.account a 
    ON a.account_id = p.created_account_id
    
    <include refid="filterPlanWherePhrase" />
    
    ORDER BY p.${criteria.sortBy}
    <if test="criteria.sortByType != null and criteria.sortByType != 1">
      ASC
    </if>
    <if test="criteria.sortByType == null or criteria.sortByType == 1">
      DESC
    </if>
    
    <if
      test="criteria.page != null and criteria.page != '' and criteria.size != null and criteria.size != ''">
      OFFSET ((#{criteria.page}-1)*#{criteria.size}) ROWS FETCH
      NEXT
      #{criteria.size} ROWS ONLY
    </if>
    
  </select>
  
  <select id="countBySearchCriteria" parameterType="PlanSearchCriteria"
    resultType="_long">

    SELECT COUNT(*)
    
    FROM 
      public.plan as p

    <include refid="filterPlanWherePhrase" />
    
  </select>
  
  <sql id="filterPlanWherePhrase">
    <where>
	    <if test="criteria.name != null and criteria.name !=''">
	      <bind name="nameSearch" value="'%' + criteria.name + '%'" />
	    </if>
	    
	    <if test="criteria.name != null and criteria.name !=''">
	       p.name LIKE #{nameSearch}
	    </if>
	    
	    <if test="criteria.status != null and criteria.status !=''">
	       AND p.status = #{criteria.status}
	    </if>
	    
	    <if test="criteria.storeIds != null and criteria.storeIds.size() > 0">
	       AND p.store_id IN 
	      <foreach item="storeId" collection="criteria.storeIds" open="("
		      separator="," close=")">
		      #{storeId}
		    </foreach>
      </if>
      
      <if test="criteria.defaultPlan != null">
         AND p.default_plan = #{criteria.defaultPlan}
      </if>
      
      <if test="criteria.availableFor != null and criteria.availableFor !=''">
         AND p.available_for = #{criteria.availableFor}
      </if>
    </where>
  </sql>
  
  <update id="updateStatus" parameterType="Plan">
    UPDATE 
      public.plan
      
    SET 
      status=#{status}
      
    WHERE 
      plan_id = #{planId}
  </update>
  
  <select id="getMaxCOrder" resultType="Long">
   SELECT 
     MAX(c_order)
   FROM 
    public.plan
   WHERE 
    store_id = #{storeId}
   
 </select>
 
 <select id="getCOrderAtPostion" resultType="Long">
   SELECT 
     c_order
   FROM 
    public.plan
   
   WHERE 
    store_id = #{storeId}
    
   ORDER BY 
    c_order ASC
   
   LIMIT 1 OFFSET (#{postion} - 1)
   
 </select>
 
 
 <update id="update" parameterType="Plan">
    UPDATE
      public.plan

    SET
      name=#{name}, 
      c_order=#{cOrder}, 
      status=#{status}, 
      updated_date=#{updatedDate} 
    
    WHERE
      plan_id = #{planId}
  </update>
 
</mapper>