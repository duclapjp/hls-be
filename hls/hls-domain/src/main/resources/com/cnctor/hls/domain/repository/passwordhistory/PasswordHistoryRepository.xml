<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
    "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.cnctor.hls.domain.repository.passwordhistory.PasswordHistoryRepository">
	<resultMap id="passwordHistoryResultMap"
		type="PasswordHistory">
		<id property="otaPasswordHistoryId"
			column="ota_password_history_id" />
		<result property="otaId" column="ota_id" />
		<result property="accountId" column="account_id" />
		<result property="storeId" column="store_id" />
		<result property="password" column="password" />
		<result property="updatedTime" column="updated_time" />
	</resultMap>

	<resultMap id="otaResultMap" type="OTA">
		<id property="otaId" column="ota_id" />
		<result property="name" column="name" />
	</resultMap>
	
	<resultMap id="accountResultMap" type="OTAPasswordHistoryAccount">
    <id property="accountId" column="account_id" />
    <result property="displayName" column="display_name" />
  </resultMap>


	<select id="countBySearchPasswordHistory"
		parameterType="PasswordHistorySearchCriteria" resultType="_long">
		SELECT count(*)
		FROM
		public.ota_password_history
		WHERE 1=1
		<if test="criteria.storeId != null and criteria.storeId != ''">
			AND store_id = #{criteria.storeId}
		</if>
		<if test="criteria.otaId != null and criteria.otaId != ''">
			AND ota_id = #{criteria.otaId}
		</if>
		<if test="criteria.accountId != null and criteria.accountId != ''">
			AND account_id = #{criteria.accountId}
		</if>

	</select>

	<select id="searchPasswordHistory"
		parameterType="PasswordHistorySearchCriteria"
		resultMap="passwordHistoryResultMap">
		SELECT
		pwh1.ota_password_history_id,
		pwh1.ota_id,
		pwh1.account_id,
		pwh1.store_id,
		pwh1.password,
		pwh1.updated_time,
		o1.name as otaName,
		a1.display_name as
		accountName

		FROM
		public.ota_password_history AS pwh1

		LEFT JOIN public.ota
		AS o1
		ON pwh1.ota_id = o1.ota_id

		LEFT JOIN
		public.account AS a1
		ON pwh1.account_id = a1.account_id

		WHERE 1=1
		<if test="criteria.storeId != null and criteria.storeId != ''">
			AND pwh1.store_id = #{criteria.storeId}
		</if>
		<if test="criteria.otaId != null and criteria.otaId != ''">
			AND pwh1.ota_id = #{criteria.otaId}
		</if>
		<if test="criteria.accountId != null and criteria.accountId != ''">
			AND pwh1.account_id = #{criteria.accountId}
		</if>

		ORDER BY pwh1.ota_password_history_id DESC
		<if
			test="criteria.page != null and criteria.page != '' and criteria.size != null and criteria.size != ''">
			OFFSET ((#{criteria.page}-1)*#{criteria.size}) ROWS FETCH
			NEXT
			#{criteria.size} ROWS ONLY
		</if>
	</select>

	<select id="getOTAByStore" parameterType="String"
		resultMap="otaResultMap">
		SELECT
		DISTINCT(o1.ota_id),
		o1.name

		FROM
		public.ota AS o1
		
		LEFT JOIN public.ota_password_history AS pwh1
    ON pwh1.ota_id = o1.ota_id

    LEFT JOIN public.account AS a1
    ON pwh1.account_id = a1.account_id
    
    WHERE 1=1
    <if test="storeId != null and storeId != ''">
      AND pwh1.store_id = #{storeId}
    </if>
    
    ORDER BY ota_id
  </select>
  
  <select id="getAccountOTAPasswordHistory" parameterType="String"
    resultMap="accountResultMap">
    SELECT
    DISTINCT(pwh1.account_id),
    a1.display_name

    FROM
    public.ota_password_history AS pwh1
    
    LEFT JOIN public.account AS a1
    ON a1.account_id = pwh1.account_id

    WHERE 1=1
    <if test="storeId != null and storeId != ''">
      AND pwh1.store_id = #{storeId}
    </if>
    
    ORDER BY a1.display_name
  </select>
  
  
  <insert id="insert" parameterType="Account">

    <selectKey keyProperty="otaPasswordHistoryId" resultType="int"
      order="BEFORE">
      SELECT nextval('public."SEQ_OTAPASSWORDHISTORY"') AS otaPasswordHistoryId
    </selectKey>

    INSERT INTO 
      public.ota_password_history
      (
        ota_password_history_id, 
        ota_id, 
        account_id, 
        password, 
        updated_time, 
        store_id
       )
    VALUES 
      (
        #{otaPasswordHistoryId}, 
        #{otaId}, 
        #{accountId}, 
        #{password}, 
        #{updatedTime}, 
        #{storeId}
      )
  </insert>
  
</mapper>